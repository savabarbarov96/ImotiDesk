import React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { format } from "date-fns";
import { bg } from "date-fns/locale";
import { CalendarIcon } from "lucide-react";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";

import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import ImageUploader from "@/components/ImageUploader";
import { useAuth } from "@/hooks/use-auth";
import { generatePropertyTitle } from "@/utils/propertyNameGenerator";

const formSchema = z.object({
  name: z.string().min(2, { message: "Името е задължително" }),
  email: z.string().email({ message: "Невалиден имейл адрес" }),
  phone: z.string().min(5, { message: "Телефонът е задължителен" }),
  description: z.string().optional(),
  price: z.string().optional(),
  address: z.string().min(5, { message: "Адресът е задължителен" }),
  property_type: z.string().min(1, { message: "Изберете тип имот" }),
  bedrooms: z.string().optional(),
  city: z.string().optional(),
});

type FormValues = z.infer<typeof formSchema>;

const SellPropertyForm: React.FC = () => {
  const { user } = useAuth();
  const [uploading, setUploading] = React.useState(false);
  const [consultationDate, setConsultationDate] = React.useState<Date | undefined>(undefined);
  const [uploadedImages, setUploadedImages] = React.useState<string[]>([]);
  const navigate = useNavigate();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      phone: "",
      description: "",
      price: "",
      address: "",
      property_type: "",
      bedrooms: "",
      city: "",
    },
  });

  const handleImageUpload = (urls: string[], _files: File[]) => {
    setUploadedImages(urls);
  };

  // Watch form values to generate title
  const watchedValues = form.watch();
  const autoGeneratedTitle = React.useMemo(() => {
    if (watchedValues.address && watchedValues.city) {
      return generatePropertyTitle({
        bedrooms: watchedValues.bedrooms ? parseInt(watchedValues.bedrooms) : undefined,
        city: watchedValues.city,
        address: watchedValues.address,
        property_type: watchedValues.property_type
      });
    }
    return '';
  }, [watchedValues.bedrooms, watchedValues.city, watchedValues.address, watchedValues.property_type]);

  const onSubmit = async (data: FormValues) => {
    try {
      setUploading(true);
      
      // Convert price to numeric if available
      const priceValue = data.price ? parseFloat(data.price) : null;
      
      // Create sell request in Supabase
      const { data: sellRequest, error } = await supabase
        .from("sell_requests")
        .insert({
          name: data.name,
          email: data.email,
          phone: data.phone,
          title: autoGeneratedTitle || null, // Use auto-generated title
          description: data.description || null,
          price: priceValue,
          address: data.address,
          property_type: data.property_type,
          consultation_date: consultationDate ? consultationDate.toISOString() : null,
          user_id: user?.id || null,
        })
        .select()
        .single();

      if (error) throw error;
      
      toast.success("Заявката беше изпратена успешно", {
        description: "Ще се свържем с вас скоро за оглед или консултация.",
      });
      
      // Reset form
      form.reset();
      setConsultationDate(undefined);
      setUploadedImages([]);
      
      // Redirect to home page after slight delay
      setTimeout(() => navigate("/"), 2000);
    } catch (error) {
      console.error("Error submitting form:", error);
      toast.error("Възникна грешка", { 
        description: "Моля, опитайте отново по-късно." 
      });
    } finally {
      setUploading(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h2 className="text-2xl font-semibold mb-6">Данни за имота</h2>
      
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Име *</FormLabel>
                  <FormControl>
                    <Input placeholder="Вашето име" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Имейл *</FormLabel>
                  <FormControl>
                    <Input type="email" placeholder="your@email.com" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Телефон *</FormLabel>
                  <FormControl>
                    <Input placeholder="+359 888 123456" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="property_type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Тип имот *</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Изберете тип имот" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="apartment">Апартамент</SelectItem>
                      <SelectItem value="house">Къща</SelectItem>
                      <SelectItem value="villa">Вила</SelectItem>
                      <SelectItem value="office">Офис</SelectItem>
                      <SelectItem value="land">Земя</SelectItem>
                      <SelectItem value="commercial">Търговски имот</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <FormField
              control={form.control}
              name="bedrooms"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Брой стаи</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="2" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="city"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Град</FormLabel>
                  <FormControl>
                    <Input placeholder="София" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="address"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Адрес *</FormLabel>
                  <FormControl>
                    <Input placeholder="ул. Малинова долина" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          {/* Auto-generated title display - moved here to not interrupt the form flow */}
          {autoGeneratedTitle && (
            <div className="p-3 bg-blue-50 border border-blue-200 rounded-md">
              <label className="text-sm font-medium text-blue-800">Автоматично генерирано заглавие:</label>
              <p className="text-sm text-blue-700 font-medium mt-1">
                {autoGeneratedTitle}
              </p>
              <p className="text-xs text-blue-600 mt-1">
                Заглавието се генерира автоматично на базата на броя стаи, града и адреса
              </p>
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="price"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Цена (€)</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="Очаквана цена" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <div>
              <FormLabel>Дата за консултация</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !consultationDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {consultationDate ? (
                      format(consultationDate, "PPP", { locale: bg })
                    ) : (
                      <span>Изберете дата</span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={consultationDate}
                    onSelect={setConsultationDate}
                    disabled={(date) => date < new Date() || date < new Date("1900-01-01")}
                    initialFocus
                    locale={bg}
                    className={cn("p-3 pointer-events-auto")}
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>
          
          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Описание</FormLabel>
                <FormControl>
                  <Textarea 
                    placeholder="Описание на имота, особености, предимства..." 
                    className="min-h-[120px]" 
                    {...field} 
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <div>
            <FormLabel className="block mb-2">Снимки на имота</FormLabel>
            <ImageUploader
              bucketName="sell_requests"
              folderPath={`images/`}
              onUploadComplete={handleImageUpload}
              maxFiles={5}
              className="mb-2"
              watermarkPath="/assets/trendimo-white.png"
              watermarkOptions={{
                opacity: 0.4,
                widthPercentage: 60
              }}
            />
            
            {uploadedImages.length > 0 && (
              <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-4">
                {uploadedImages.map((url, index) => (
                  <div key={index} className="relative aspect-square rounded-md overflow-hidden border">
                    <img
                      src={url}
                      alt={`Uploaded image ${index + 1}`}
                      className="h-full w-full object-cover"
                    />
                  </div>
                ))}
              </div>
            )}
          </div>
          
          <Button 
            type="submit" 
            className="w-full" 
            disabled={uploading}
          >
            {uploading ? "Изпращане..." : "Изпрати заявка"}
          </Button>
        </form>
      </Form>
    </div>
  );
};

export default SellPropertyForm;
